{
  "_args": [
    [
      {
        "raw": "mysql2@^1.4.2",
        "scope": null,
        "escapedName": "mysql2",
        "name": "mysql2",
        "rawSpec": "^1.4.2",
        "spec": ">=1.4.2 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\Bryan\\Desktop\\My Stuff\\contributions\\fight-stats"
    ]
  ],
  "_from": "mysql2@>=1.4.2 <2.0.0",
  "_id": "mysql2@1.4.2",
  "_inCache": true,
  "_location": "/mysql2",
  "_nodeVersion": "8.4.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/mysql2-1.4.2.tgz_1503817603602_0.07008775626309216"
  },
  "_npmUser": {
    "name": "sidorares",
    "email": "sidorares@yandex.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {
    "core-util-is": "1.0.2",
    "inherits": "2.0.3",
    "isarray": "1.0.0",
    "process-nextick-args": "1.0.7",
    "safe-buffer": "5.1.1",
    "string_decoder": "1.0.3",
    "util-deprecate": "1.0.2"
  },
  "_requested": {
    "raw": "mysql2@^1.4.2",
    "scope": null,
    "escapedName": "mysql2",
    "name": "mysql2",
    "rawSpec": "^1.4.2",
    "spec": ">=1.4.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/mysql2/-/mysql2-1.4.2.tgz",
  "_shasum": "b5e04009fd6d63f00755253df88540a2532640b2",
  "_shrinkwrap": null,
  "_spec": "mysql2@^1.4.2",
  "_where": "C:\\Users\\Bryan\\Desktop\\My Stuff\\contributions\\fight-stats",
  "author": {
    "name": "Andrey Sidorov",
    "email": "sidorares@yandex.ru"
  },
  "bugs": {
    "url": "https://github.com/sidorares/node-mysql2/issues"
  },
  "dependencies": {
    "cardinal": "1.0.0",
    "denque": "^1.1.1",
    "generate-function": "^2.0.0",
    "iconv-lite": "^0.4.18",
    "long": "^3.2.0",
    "lru-cache": "^4.1.1",
    "named-placeholders": "1.1.1",
    "object-assign": "^4.1.1",
    "readable-stream": "2.3.2",
    "safe-buffer": "^5.0.1",
    "seq-queue": "0.0.5",
    "sqlstring": "^2.2.0"
  },
  "description": "fast mysql driver. Implements core protocol, prepared statements, ssl and compression in native JS",
  "devDependencies": {
    "assert-diff": "^1.2.0",
    "error-stack-parser": "^2.0.1",
    "eslint": "^3.19.0",
    "eslint-config-prettier": "^2.1.1",
    "eslint-plugin-async-await": "0.0.0",
    "eslint-plugin-markdown": "^1.0.0-beta.2",
    "eslint-plugin-prettier": "^2.1.1",
    "husky": "^0.14.0",
    "is-async-supported": "^1.2.0",
    "lint-staged": "^4.0.0",
    "portfinder": "^1.0.10",
    "prettier": "^1.3.1",
    "prettier-markdown": "^0.1.6",
    "progress": "2.0.0",
    "urun": "0.0.8",
    "utest": "0.0.8"
  },
  "directories": {
    "example": "examples"
  },
  "dist": {
    "shasum": "b5e04009fd6d63f00755253df88540a2532640b2",
    "tarball": "https://registry.npmjs.org/mysql2/-/mysql2-1.4.2.tgz"
  },
  "engines": {
    "node": ">= 4.0"
  },
  "files": [
    "lib",
    "index.js",
    "promise.js"
  ],
  "gitHead": "4c1a807a5025c7fe332d0b621547e2788b876375",
  "homepage": "https://github.com/sidorares/node-mysql2#readme",
  "keywords": [
    "mysql",
    "client",
    "server"
  ],
  "license": "MIT",
  "lint-staged": {
    "*.js": [
      "prettier --single-quote --trailing-comma none --write",
      "git add"
    ]
  },
  "main": "index.js",
  "maintainers": [
    {
      "name": "sushantdhiman",
      "email": "sushantdhiman@outlook.com"
    },
    {
      "name": "iarna",
      "email": "me@re-becca.org"
    },
    {
      "name": "sidorares",
      "email": "sidorares@yandex.com"
    }
  ],
  "name": "mysql2",
  "optionalDependencies": {},
  "readme": "## Node MySQL 2\n\n[![Greenkeeper badge](https://badges.greenkeeper.io/sidorares/node-mysql2.svg)](https://greenkeeper.io/)\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Node.js Version][node-version-image]][node-version-url]\n[![Linux Build][travis-image]][travis-url]\n[![Windows Build][appveyor-image]][appveyor-url]\n[![License][license-image]][license-url]\n\n> MySQL client for Node.js with focus on performance. Supports prepared statements, non-utf8 encodings, binary log protocol, compression, ssl [much more](https://github.com/sidorares/node-mysql2/tree/master/documentation)\n\n__Table of contents__\n\n  - [History and Why MySQL2](#history-and-why-mysql2)\n  - [Installation](#installation)\n  - [First Query](#first-query)\n  - [Using Prepared Statements](#using-prepared-statements)\n  - [Using Promise Wrapper](#using-promise-wrapper)\n  - [API and Configuration](#api-and-configuration)\n  - [Documentation](#documentation)\n  - [Acknowledgements](#acknowledgements)\n  - [Contributing](#contributing)\n\n## History and Why MySQL2\n\nMySQL2 project is a continuation of [MySQL-Native][mysql-native]. Protocol parser code was rewritten from scratch and api changed to match popular [mysqljs/mysql][node-mysql]. MySQL2 team is working together with [mysqljs/mysql][node-mysql] team to factor out shared code and move it under [mysqljs][node-mysql] organisation.\n\nMySQL2 is mostly API compatible with [mysqljs][node-mysql] and supports majority of features. MySQL2 also offers these additional features\n\n - Faster / Better Performance\n - [Prepared Statements](https://github.com/sidorares/node-mysql2/tree/master/documentation/Prepared-Statements.md)\n - MySQL Binary Log Protocol\n - [MySQL Server](https://github.com/sidorares/node-mysql2/tree/master/documentation/MySQL-Server.md)\n - Extended support for Encoding and Collation\n - [Promise Wrapper](https://github.com/sidorares/node-mysql2/tree/master/documentation/Promise-Wrapper.md)\n - Compression\n - SSL and [Authentication Switch](https://github.com/sidorares/node-mysql2/tree/master/documentation/Authentication-Switch.md)\n - [Custom Streams](https://github.com/sidorares/node-mysql2/tree/master/documentation/Extras.md)\n - Pooling\n\n## Installation\n\nMySQL2 is free from native bindings and can be installed on Linux, Mac OS or Windows without any issues.\n\n```bash\nnpm install --save mysql2\n```\n\n## First Query\n\n```js\n// get the client\nconst mysql = require('mysql2');\n\n// create the connection to database\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  database: 'test'\n});\n\n// simple query\nconnection.query(\n  'SELECT * FROM `table` WHERE `name` = \"Page\" AND `age` > 45',\n  function(err, results, fields) {\n    console.log(results); // results contains rows returned by server\n    console.log(fields); // fields contains extra meta data about results, if available\n  }\n);\n\n// with placeholder\nconnection.query(\n  'SELECT * FROM `table` WHERE `name` = ? AND `age` > ?',\n  ['Page', 45],\n  function(err, results) {\n    console.log(results);\n  }\n);\n```\n\n## Using Prepared Statements\n\nWith MySQL2 you also get the prepared statements. With prepared statements MySQL doesn't have to prepare plan for same query everytime, this results in better performance. If you don't know why they are important, please check these discussions\n\n- [How prepared statements can protect from SQL Injection attacks](http://stackoverflow.com/questions/8263371/how-can-prepared-statements-protect-from-sql-injection-attacks)\n\nMySQL provides `execute` helper which will prepare and query the statement. You can also manually prepare / unprepare statement with `prepare` / `unprepare` methods.\n\n```js\n// get the client\nconst mysql = require('mysql2');\n\n// create the connection to database\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  database: 'test'\n});\n\n// execute will internally call prepare and query\nconnection.execute(\n  'SELECT * FROM `table` WHERE `name` = ? AND `age` > ?',\n  ['Rick C-137', 53],\n  function(err, results, fields) {\n    console.log(results); // results contains rows returned by server\n    console.log(fields); // fields contains extra meta data about results, if available\n\n    // If you execute same statement again, it will be picked form a LRU cache\n    // which will save query preparation time and give better performance\n  }\n);\n```\n## Using Promise Wrapper\n\nMySQL2 also support Promise API. Which works very well with ES7 async await.\n\n<!--eslint-disable-next-block-->\n```js\nasync function main() {\n  // get the client\n  const  mysql = require('mysql2/promise');\n  // create the connection\n  const connection = await mysql.createConnection({host:'localhost', user: 'root', database: 'test'});\n  // query database\n  const [rows, fields] = await connection.execute('SELECT * FROM `table` WHERE `name` = ? AND `age` > ?', ['Morty', 14]);\n}\n```\n\nMySQL2 use default `Promise` object available in scope. But you can choose which `Promise` implementation you want to use\n\n<!--eslint-disable-next-block-->\n```js\n// get the client\nconst mysql = require('mysql2/promise');\n\n// get the promise implementation, we will use bluebird\nconst bluebird = require('bluebird');\n\n// create the connection, specify bluebird as Promise\nconst connection =  mysql.createConnection({host:'localhost', user: 'root', database: 'test', Promise: bluebird});\n\n// query database\nconst [rows, fields] =  connection.execute('SELECT * FROM `table` WHERE `name` = ? AND `age` > ?', ['Morty', 14]);\n```\n\n## API and Configuration\n\nMySQL2 is mostly API compatible with [Node MySQL][node-mysql]. You should check their API documentation to see all available API options.\n\nIf you find any incompatibility with [Node MySQL][node-mysql], Please report via Issue tracker. We will fix reported incompatibility on priority basis.\n\n## Documentation\n\nYou can find more detailed documentation [here](https://github.com/sidorares/node-mysql2/tree/master/documentation). You should also check various code [examples](https://github.com/sidorares/node-mysql2/tree/master/examples) to understand advanced concepts.\n\n## Acknowledgements\n\n  - Internal protocol is written by @sidorares [MySQL-Native](https://github.com/sidorares/nodejs-mysql-native)\n  - Constants, SQL parameters interpolation, Pooling, `ConnectionConfig` class taken from [node-mysql](https://github.com/mysqljs/mysql)\n  - SSL upgrade code based on @TooTallNate [code](https://gist.github.com/TooTallNate/848444)\n  - Secure connection / compressed connection api flags compatible to [MariaSQL](https://github.com/mscdex/node-mariasql/) client.\n  - [Contributors](https://github.com/sidorares/node-mysql2/graphs/contributors)\n\n## Contributing\n\nWant to improve something in `node-mysql2`. Please check [Contributing.md](https://github.com/sidorares/node-mysql2/blob/master/Contributing.md) for detailed instruction on how to get started.\n\n\n[npm-image]: https://img.shields.io/npm/v/mysql2.svg\n[npm-url]: https://npmjs.org/package/mysql2\n[node-version-image]: http://img.shields.io/node/v/mysql2.svg\n[node-version-url]: http://nodejs.org/download/\n[travis-image]: https://img.shields.io/travis/sidorares/node-mysql2/master.svg?label=linux\n[travis-url]: https://travis-ci.org/sidorares/node-mysql2\n[appveyor-image]: https://img.shields.io/appveyor/ci/sidorares/node-mysql2/master.svg?label=windows\n[appveyor-url]: https://ci.appveyor.com/project/sidorares/node-mysql2\n[downloads-image]: https://img.shields.io/npm/dm/mysql2.svg\n[downloads-url]: https://npmjs.org/package/mysql2\n[license-url]: https://github.com/sidorares/node-mysql2/blob/master/License\n[license-image]: https://img.shields.io/npm/l/mysql2.svg?maxAge=2592000\n[node-mysql]: https://github.com/mysqljs/mysql\n[mysql-native]: https://github.com/sidorares/nodejs-mysql-native\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sidorares/node-mysql2.git"
  },
  "scripts": {
    "benchmark": "./benchmarks/run-unit.js",
    "eslint-check": "eslint --print-config .eslintrc | eslint-config-prettier-check",
    "lint": "npm run lint:docs && npm run lint:code",
    "lint:code": "eslint index.js promise.js 'lib/**/*.js' 'test/**/*.js'",
    "lint:docs": "eslint  Contributing.md 'documentation/**/*.md' examples/*.js",
    "precommit": "lint-staged",
    "prettier": "prettier --single-quote --trailing-comma none --write \"{lib,examples,test}/**/*.js\"",
    "prettier:docs": "prettier-markdown README.md documentation/*",
    "test": "npm run lint && npm run test:raw",
    "test:raw": "node ./test/run.js && MYSQL_USE_COMPRESSION=1 node ./test/run.js",
    "wait-port": "wait-on"
  },
  "version": "1.4.2"
}
